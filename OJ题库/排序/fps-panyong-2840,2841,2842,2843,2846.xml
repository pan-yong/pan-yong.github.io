<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[冒泡排序 bubsort [1*]]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	<span> 输入n个整数，用冒泡排序的方法进行排序（升序，由小到大）。 <br />
冒泡法是依次比较相邻的两个数，将这两个数排好。 <br />
具体方法是，将a[i]和a[i+1]比较，交换排好，i从1到n-1循环。 <br />
这叫一趟比较，则最大数沉底。 <br />
i再回头从1到n-2继续做a[i]和a[i+1]相邻两个元素的比较排序。 <br />
依此重复，做n-1趟冒泡比较和排序。</span>
</p>
<p align="left">
	<b><span>Input</span> </b> 
</p>
<p>
	<span> 第一行数字n 代表接下来有n个整数 <br />
接下来n行，每行一个整数 <br />
</span>
</p>
<p align="left">
	<b><span>Output</span> </b> 
</p>
<p>
	<span> 升序输出排序结果 <br />
每行一个数据 <br />
</span>
</p>
<p align="left">
	<b><span>Sample Input</span> </b> 
</p>
<pre><span>5
12
18
14
13
16 </span></pre>
<p align="left">
	<b><span>Sample Output</span> </b> 
</p>
<pre><span>12
13
14
16
18 </span></pre>
<p align="left">
	<b><span>Hint</span> </b> 
</p>
<span> n&lt;=1000 <br />
每个数据&lt;=5000 </span>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[100
2744
4965
1678
2387
1113
3525
1127
3972
3990
4398
2464
3666
4744
1679
3547
722
835
644
2911
2177
133
3083
3462
2789
1398
2918
4035
2432
2694
3894
3082
1413
2676
2906
4797
458
972
1457
3721
3185
1104
1697
1667
2209
823
4002
1062
3268
4809
246
4055
3296
2449
3484
4699
679
242
3879
3245
4798
1687
85
4506
4887
3110
1721
3293
1872
1995
4871
1645
3646
1000
1943
2209
3195
2042
2116
3516
4016
4512
864
2521
4023
2680
2346
4093
1438
2787
290
1597
2242
4533
2091
1316
3918
269
1106
389
1879
]]></test_input>
<test_output><![CDATA[85
133
242
246
269
290
389
458
644
679
722
823
835
864
972
1000
1062
1104
1106
1113
1127
1316
1398
1413
1438
1457
1597
1645
1667
1678
1679
1687
1697
1721
1872
1879
1943
1995
2042
2091
2116
2177
2209
2209
2242
2346
2387
2432
2449
2464
2521
2676
2680
2694
2744
2787
2789
2906
2911
2918
3082
3083
3110
3185
3195
3245
3268
3293
3296
3462
3484
3516
3525
3547
3646
3666
3721
3879
3894
3918
3972
3990
4002
4016
4023
4035
4055
4093
4398
4506
4512
4533
4699
4744
4797
4798
4809
4871
4887
4965
]]></test_output>
<test_input><![CDATA[23
2071
1129
2897
2398
573
4963
2681
1492
1723
1672
3626
4516
1409
2929
1602
648
4952
3580
2419
4554
2390
2542
2264
]]></test_input>
<test_output><![CDATA[573
648
1129
1409
1492
1602
1672
1723
2071
2264
2390
2398
2419
2542
2681
2897
2929
3580
3626
4516
4554
4952
4963
]]></test_output>
<test_input><![CDATA[1000
360
4986
2472
1239
3328
4072
747
4005
613
1403
161
877
2345
4228
951
4508
2212
2773
1345
3407
2715
4904
1209
2669
1199
3771
1852
1151
4090
2267
2594
193
2763
1197
684
3034
851
653
4512
1488
3786
4027
523
4431
3104
3390
2578
4372
4439
2159
56
4345
494
2799
386
4576
2057
3348
4487
45
4161
2290
2741
722
2317
4457
1369
9
3894
3521
3324
4034
3474
2954
3620
2239
1602
1438
3602
968
4483
1537
4689
4168
4843
2530
457
2964
1462
4319
382
1375
1580
2027
2018
4183
2030
4858
2796
3522
1699
4718
3536
3748
4347
3528
4885
1610
684
2443
19
4205
448
67
952
3116
1795
4899
4811
2654
2207
43
4310
2194
2335
4314
2448
3614
2045
2713
1077
2649
1775
3048
3943
913
4882
2620
3450
1884
2224
3128
1835
3326
4880
3423
818
1040
4691
2531
308
317
4980
3396
2309
2640
4303
3738
2655
1078
2510
2060
2423
1565
4395
4058
3167
4803
3199
3261
4757
1210
492
4051
4376
3260
4200
529
1109
574
1859
4818
3136
4798
1067
2010
166
3282
662
2791
9
3128
916
3723
3566
3777
1643
4279
2423
2185
2572
3341
3313
2872
746
2695
732
1160
1911
2485
984
801
3625
422
2165
1970
4514
597
1747
878
3789
4104
1409
1600
3738
3962
2423
1451
3774
545
1812
1527
725
3257
4445
1405
3123
4610
4214
1552
4190
613
1936
1860
3714
1743
4272
2424
4704
2472
3920
535
1962
3119
3844
4909
316
2128
553
2326
986
3094
1209
1672
440
174
2692
1845
4835
3551
1597
2829
1061
986
1244
4403
928
4957
1874
1907
156
4847
1565
3625
866
4502
2007
2613
2100
485
4869
2776
4859
276
346
4357
3023
4366
3633
4376
1631
3600
265
2262
1393
3507
4129
3931
4453
4873
1227
244
4996
128
54
4667
2403
3139
180
3585
3629
640
2436
782
695
2120
3922
894
4863
4022
4045
399
4862
1725
3685
961
2257
415
3889
454
4135
2229
611
1157
555
3080
2745
1566
3033
3041
3146
1944
4700
3945
2534
3256
2293
3500
1204
2333
3986
3430
3178
842
429
720
1385
1485
2731
1688
2080
3066
2211
4772
3258
3695
3610
3450
284
3383
1906
338
2042
1135
2605
2029
3769
4585
3718
2632
3280
580
2368
2355
834
1736
309
367
66
2095
3238
3779
3742
2939
647
653
103
2149
3571
3269
4115
595
2813
329
3818
3396
4229
521
2710
1365
3234
3806
2956
1347
3608
1397
161
375
2586
3699
1488
2054
2208
1505
4331
3152
2306
793
2882
115
915
2536
241
4661
505
1143
465
374
3141
3907
516
2975
3957
3565
3681
984
613
4225
2178
3387
1647
4531
4869
4532
2715
2627
2146
2252
4412
1146
4512
1452
1075
2270
201
3332
2993
1747
679
1508
710
1180
632
607
522
2581
3327
2396
805
3697
1327
2094
2538
1720
1149
3689
2912
4394
385
180
4927
1474
4671
1906
2365
3820
205
508
3183
777
251
4963
4041
445
1290
1416
2063
138
4401
805
3524
3919
420
4538
3988
2057
1430
2470
1751
2646
424
4329
1697
2330
372
1610
2349
1699
3867
1552
4917
1272
2260
1294
1118
1920
1747
3078
2843
168
814
743
350
1212
2126
2609
4547
2736
1187
3465
3826
2604
2759
3467
4945
2987
549
321
3148
2734
993
3391
3367
4447
273
485
2092
3450
1128
172
3926
1678
2079
1413
4397
4481
1969
4171
1315
3651
3159
3163
207
525
1481
2341
1146
3187
2812
3293
3400
1416
1699
1068
3149
156
2418
3778
3931
1534
2318
2198
1360
4774
183
2030
774
2310
257
2950
4297
1649
2757
2604
4620
2873
1979
4205
1752
1084
4168
3463
3610
4731
3240
986
3774
467
4277
4323
2986
2933
3823
4566
4465
509
665
4143
211
2016
2123
4863
2071
1129
2897
2398
573
4963
2681
1492
1723
1672
3626
4516
1409
2929
1602
648
4952
3580
2419
4554
2390
2542
2264
4225
4657
818
1620
4696
3659
1311
4073
2756
92
1435
869
780
197
2242
9
1700
4734
3975
3709
512
463
351
3281
1613
1661
3485
4448
1243
2631
3146
1418
3979
1421
1806
914
8
4384
4298
3695
2414
4890
1009
3598
3335
1109
3984
1163
4833
225
4236
364
3644
3750
332
1090
3638
1870
1862
1749
421
1648
2693
4898
715
312
795
3632
4537
3654
2554
4331
3559
4568
3902
1194
898
4384
891
2840
2549
2716
4739
2977
434
3516
1710
2399
3335
2932
4929
2569
4212
1276
3063
4576
4868
2945
2931
604
2084
716
4708
1183
2416
1072
2212
176
1237
2698
4925
917
2666
1696
4076
4691
3159
4192
4436
496
3966
530
156
425
2744
4965
1678
2387
1113
3525
1127
3972
3990
4398
2464
3666
4744
1679
3547
722
835
644
2911
2177
133
3083
3462
2789
1398
2918
4035
2432
2694
3894
3082
1413
2676
2906
4797
458
972
1457
3721
3185
1104
1697
1667
2209
823
4002
1062
3268
4809
246
4055
3296
2449
3484
4699
679
242
3879
3245
4798
1687
85
4506
4887
3110
1721
3293
1872
1995
4871
1645
3646
1000
1943
2209
3195
2042
2116
3516
4016
4512
864
2521
4023
2680
2346
4093
1438
2787
290
1597
2242
4533
2091
1316
3918
269
1106
389
1879
866
2412
1757
1264
4086
2650
4941
2621
2825
3815
2431
3117
3352
457
4330
3188
4401
586
4214
3598
2032
1207
3472
611
2620
2357
1017
974
4908
2268
3464
1067
4883
4461
925
3142
2556
4800
1444
1868
1807
2677
3158
4690
196
2025
3768
1886
1201
4321
3653
161
3009
185
3835
848
1188
704
4081
3451
2080
127
841
774
3432
673
1168
3391
3899
1903
1610
1601
297
1788
2427
1530
2165
4686
4002
1960
2878
1383
3804
1703
4751
3551
4993
4423
2998
73
2907
884
2030
1286
4632
2426
3847
4822
1308
1962
4483
]]></test_input>
<test_output><![CDATA[8
9
9
9
19
43
45
54
56
66
67
73
85
92
103
115
127
128
133
138
156
156
156
161
161
161
166
168
172
174
176
180
180
183
185
193
196
197
201
205
207
211
225
241
242
244
246
251
257
265
269
273
276
284
290
297
308
309
312
316
317
321
329
332
338
346
350
351
360
364
367
372
374
375
382
385
386
389
399
415
420
421
422
424
425
429
434
440
445
448
454
457
457
458
463
465
467
485
485
492
494
496
505
508
509
512
516
521
522
523
525
529
530
535
545
549
553
555
573
574
580
586
595
597
604
607
611
611
613
613
613
632
640
644
647
648
653
653
662
665
673
679
679
684
684
695
704
710
715
716
720
722
722
725
732
743
746
747
774
774
777
780
782
793
795
801
805
805
814
818
818
823
834
835
841
842
848
851
864
866
866
869
877
878
884
891
894
898
913
914
915
916
917
925
928
951
952
961
968
972
974
984
984
986
986
986
993
1000
1009
1017
1040
1061
1062
1067
1067
1068
1072
1075
1077
1078
1084
1090
1104
1106
1109
1109
1113
1118
1127
1128
1129
1135
1143
1146
1146
1149
1151
1157
1160
1163
1168
1180
1183
1187
1188
1194
1197
1199
1201
1204
1207
1209
1209
1210
1212
1227
1237
1239
1243
1244
1264
1272
1276
1286
1290
1294
1308
1311
1315
1316
1327
1345
1347
1360
1365
1369
1375
1383
1385
1393
1397
1398
1403
1405
1409
1409
1413
1413
1416
1416
1418
1421
1430
1435
1438
1438
1444
1451
1452
1457
1462
1474
1481
1485
1488
1488
1492
1505
1508
1527
1530
1534
1537
1552
1552
1565
1565
1566
1580
1597
1597
1600
1601
1602
1602
1610
1610
1610
1613
1620
1631
1643
1645
1647
1648
1649
1661
1667
1672
1672
1678
1678
1679
1687
1688
1696
1697
1697
1699
1699
1699
1700
1703
1710
1720
1721
1723
1725
1736
1743
1747
1747
1747
1749
1751
1752
1757
1775
1788
1795
1806
1807
1812
1835
1845
1852
1859
1860
1862
1868
1870
1872
1874
1879
1884
1886
1903
1906
1906
1907
1911
1920
1936
1943
1944
1960
1962
1962
1969
1970
1979
1995
2007
2010
2016
2018
2025
2027
2029
2030
2030
2030
2032
2042
2042
2045
2054
2057
2057
2060
2063
2071
2079
2080
2080
2084
2091
2092
2094
2095
2100
2116
2120
2123
2126
2128
2146
2149
2159
2165
2165
2177
2178
2185
2194
2198
2207
2208
2209
2209
2211
2212
2212
2224
2229
2239
2242
2242
2252
2257
2260
2262
2264
2267
2268
2270
2290
2293
2306
2309
2310
2317
2318
2326
2330
2333
2335
2341
2345
2346
2349
2355
2357
2365
2368
2387
2390
2396
2398
2399
2403
2412
2414
2416
2418
2419
2423
2423
2423
2424
2426
2427
2431
2432
2436
2443
2448
2449
2464
2470
2472
2472
2485
2510
2521
2530
2531
2534
2536
2538
2542
2549
2554
2556
2569
2572
2578
2581
2586
2594
2604
2604
2605
2609
2613
2620
2620
2621
2627
2631
2632
2640
2646
2649
2650
2654
2655
2666
2669
2676
2677
2680
2681
2692
2693
2694
2695
2698
2710
2713
2715
2715
2716
2731
2734
2736
2741
2744
2745
2756
2757
2759
2763
2773
2776
2787
2789
2791
2796
2799
2812
2813
2825
2829
2840
2843
2872
2873
2878
2882
2897
2906
2907
2911
2912
2918
2929
2931
2932
2933
2939
2945
2950
2954
2956
2964
2975
2977
2986
2987
2993
2998
3009
3023
3033
3034
3041
3048
3063
3066
3078
3080
3082
3083
3094
3104
3110
3116
3117
3119
3123
3128
3128
3136
3139
3141
3142
3146
3146
3148
3149
3152
3158
3159
3159
3163
3167
3178
3183
3185
3187
3188
3195
3199
3234
3238
3240
3245
3256
3257
3258
3260
3261
3268
3269
3280
3281
3282
3293
3293
3296
3313
3324
3326
3327
3328
3332
3335
3335
3341
3348
3352
3367
3383
3387
3390
3391
3391
3396
3396
3400
3407
3423
3430
3432
3450
3450
3450
3451
3462
3463
3464
3465
3467
3472
3474
3484
3485
3500
3507
3516
3516
3521
3522
3524
3525
3528
3536
3547
3551
3551
3559
3565
3566
3571
3580
3585
3598
3598
3600
3602
3608
3610
3610
3614
3620
3625
3625
3626
3629
3632
3633
3638
3644
3646
3651
3653
3654
3659
3666
3681
3685
3689
3695
3695
3697
3699
3709
3714
3718
3721
3723
3738
3738
3742
3748
3750
3768
3769
3771
3774
3774
3777
3778
3779
3786
3789
3804
3806
3815
3818
3820
3823
3826
3835
3844
3847
3867
3879
3889
3894
3894
3899
3902
3907
3918
3919
3920
3922
3926
3931
3931
3943
3945
3957
3962
3966
3972
3975
3979
3984
3986
3988
3990
4002
4002
4005
4016
4022
4023
4027
4034
4035
4041
4045
4051
4055
4058
4072
4073
4076
4081
4086
4090
4093
4104
4115
4129
4135
4143
4161
4168
4168
4171
4183
4190
4192
4200
4205
4205
4212
4214
4214
4225
4225
4228
4229
4236
4272
4277
4279
4297
4298
4303
4310
4314
4319
4321
4323
4329
4330
4331
4331
4345
4347
4357
4366
4372
4376
4376
4384
4384
4394
4395
4397
4398
4401
4401
4403
4412
4423
4431
4436
4439
4445
4447
4448
4453
4457
4461
4465
4481
4483
4483
4487
4502
4506
4508
4512
4512
4512
4514
4516
4531
4532
4533
4537
4538
4547
4554
4566
4568
4576
4576
4585
4610
4620
4632
4657
4661
4667
4671
4686
4689
4690
4691
4691
4696
4699
4700
4704
4708
4718
4731
4734
4739
4744
4751
4757
4772
4774
4797
4798
4798
4800
4803
4809
4811
4818
4822
4833
4835
4843
4847
4858
4859
4862
4863
4863
4868
4869
4869
4871
4873
4880
4882
4883
4885
4887
4890
4898
4899
4904
4908
4909
4917
4925
4927
4929
4941
4945
4952
4957
4963
4963
4965
4980
4986
4993
4996
]]></test_output>
<test_input><![CDATA[50
951
4508
2212
2773
1345
3407
2715
4904
1209
2669
1199
3771
1852
1151
4090
2267
2594
193
2763
1197
684
3034
851
653
4512
1488
3786
4027
523
4431
3104
3390
2578
4372
4439
2159
56
4345
494
2799
386
4576
2057
3348
4487
45
4161
2290
2741
722
]]></test_input>
<test_output><![CDATA[45
56
193
386
494
523
653
684
722
851
951
1151
1197
1199
1209
1345
1488
1852
2057
2159
2212
2267
2290
2578
2594
2669
2715
2741
2763
2773
2799
3034
3104
3348
3390
3407
3771
3786
4027
4090
4161
4345
4372
4431
4439
4487
4508
4512
4576
4904
]]></test_output>
<test_input><![CDATA[17
360
4986
2472
1239
3328
4072
747
4005
613
1403
161
877
2345
4228
951
4508
2212
]]></test_input>
<test_output><![CDATA[161
360
613
747
877
951
1239
1403
2212
2345
2472
3328
4005
4072
4228
4508
4986
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[基础算法-排序]]></source>
		<solution language="C++"><![CDATA[#include<iostream>
using namespace std;
int a[1001],i,j,n,s;
int main()
{
    cin>>n;
    for(i=1;i<=n;i++){cin>>a[i];}
    for(i=n-1;i>=1;i--)
    {
        for(j=1;j<=i;j++)
        {
            if (a[j]>a[j+1])
            {
                s=a[j];
                a[j]=a[j+1];
                a[j+1]=s;
            }
        }
    }
    for(i=1;i<=n;i++){cout<<a[i]<<endl;}
    return 0;
}
]]></solution>
			<solution language="Pascal"><![CDATA[var a:array[1..1000] of longint;
    n,i,j,t:longint;
begin
  readln(n);
  for i:=1 to n do
    readln(a[i]);
  for i:=1 to n-1 do
    for j:=1 to n-i do
      if a[j]>a[j+1] then
      begin
        t:=a[j];
        a[j]:=a[j+1];
        a[j+1]:=t;
      end;
  for i:=1 to n do
    writeln(a[i]);
end.]]></solution>
			<solution language="Java"><![CDATA[import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
//        int []data = {9,3,6,21,2,1,34,8,2,3};
        int n;
        Scanner cin = new Scanner(System.in);
        n = cin.nextInt();
        int []data = new int[n];
        for(int i=0;i<n;i++)
            data[i] = cin.nextInt();
        for(int i=0;i<data.length-1;i++){
            for(int j=0;j<data.length-1-i;j++)
                if(data[j]>data[j+1]){
                    int t       = data[j];
                    data[j]     = data[j+1];
                    data[j+1]   = t;
                }
        }
        for(int v:data){
            System.out.println(v+" ");
        }
    }
}
]]></solution>
	</item>
<item>
<title><![CDATA[直接选择排序 selsort [1*]]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	<span> 输入n个整数，用选择排序的方法进行排序（升序，由小到大排） <br />
选排方法：从第1到第n个数中找出最大数的位置，将最大数与第1个元素交换。 <br />
从第2个数到第n个找出最大数的位置，将最大数与第2个元素交换。 <br />
以此类推完成n-1趟选择排序。 <br />
<br />
</span>
</p>
<p align="left">
	<b><span>Input</span> </b> 
</p>
<p>
	<span> 第一行数字n 代表接下来有n个整数 <br />
接下来n行，每行一个整数 <br />
</span>
</p>
<p align="left">
	<b><span>Output</span> </b> 
</p>
<p>
	<span> 升序输出排序结果 <br />
每行一个数据 <br />
</span>
</p>
<p align="left">
	<b><span>Sample Input</span> </b> 
</p>
<pre><span>5
12
18
14
13
16 </span></pre>
<p align="left">
	<b><span>Sample Output</span> </b> 
</p>
<pre><span>12
13
14
16
18 </span></pre>
<p align="left">
	<b><span>Hint</span> </b> 
</p>
<span> n&lt;=1000 <br />
每个数据&lt;=5000 </span>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[100
2744
4965
1678
2387
1113
3525
1127
3972
3990
4398
2464
3666
4744
1679
3547
722
835
644
2911
2177
133
3083
3462
2789
1398
2918
4035
2432
2694
3894
3082
1413
2676
2906
4797
458
972
1457
3721
3185
1104
1697
1667
2209
823
4002
1062
3268
4809
246
4055
3296
2449
3484
4699
679
242
3879
3245
4798
1687
85
4506
4887
3110
1721
3293
1872
1995
4871
1645
3646
1000
1943
2209
3195
2042
2116
3516
4016
4512
864
2521
4023
2680
2346
4093
1438
2787
290
1597
2242
4533
2091
1316
3918
269
1106
389
1879
]]></test_input>
<test_output><![CDATA[85
133
242
246
269
290
389
458
644
679
722
823
835
864
972
1000
1062
1104
1106
1113
1127
1316
1398
1413
1438
1457
1597
1645
1667
1678
1679
1687
1697
1721
1872
1879
1943
1995
2042
2091
2116
2177
2209
2209
2242
2346
2387
2432
2449
2464
2521
2676
2680
2694
2744
2787
2789
2906
2911
2918
3082
3083
3110
3185
3195
3245
3268
3293
3296
3462
3484
3516
3525
3547
3646
3666
3721
3879
3894
3918
3972
3990
4002
4016
4023
4035
4055
4093
4398
4506
4512
4533
4699
4744
4797
4798
4809
4871
4887
4965
]]></test_output>
<test_input><![CDATA[23
2071
1129
2897
2398
573
4963
2681
1492
1723
1672
3626
4516
1409
2929
1602
648
4952
3580
2419
4554
2390
2542
2264
]]></test_input>
<test_output><![CDATA[573
648
1129
1409
1492
1602
1672
1723
2071
2264
2390
2398
2419
2542
2681
2897
2929
3580
3626
4516
4554
4952
4963
]]></test_output>
<test_input><![CDATA[1000
360
4986
2472
1239
3328
4072
747
4005
613
1403
161
877
2345
4228
951
4508
2212
2773
1345
3407
2715
4904
1209
2669
1199
3771
1852
1151
4090
2267
2594
193
2763
1197
684
3034
851
653
4512
1488
3786
4027
523
4431
3104
3390
2578
4372
4439
2159
56
4345
494
2799
386
4576
2057
3348
4487
45
4161
2290
2741
722
2317
4457
1369
9
3894
3521
3324
4034
3474
2954
3620
2239
1602
1438
3602
968
4483
1537
4689
4168
4843
2530
457
2964
1462
4319
382
1375
1580
2027
2018
4183
2030
4858
2796
3522
1699
4718
3536
3748
4347
3528
4885
1610
684
2443
19
4205
448
67
952
3116
1795
4899
4811
2654
2207
43
4310
2194
2335
4314
2448
3614
2045
2713
1077
2649
1775
3048
3943
913
4882
2620
3450
1884
2224
3128
1835
3326
4880
3423
818
1040
4691
2531
308
317
4980
3396
2309
2640
4303
3738
2655
1078
2510
2060
2423
1565
4395
4058
3167
4803
3199
3261
4757
1210
492
4051
4376
3260
4200
529
1109
574
1859
4818
3136
4798
1067
2010
166
3282
662
2791
9
3128
916
3723
3566
3777
1643
4279
2423
2185
2572
3341
3313
2872
746
2695
732
1160
1911
2485
984
801
3625
422
2165
1970
4514
597
1747
878
3789
4104
1409
1600
3738
3962
2423
1451
3774
545
1812
1527
725
3257
4445
1405
3123
4610
4214
1552
4190
613
1936
1860
3714
1743
4272
2424
4704
2472
3920
535
1962
3119
3844
4909
316
2128
553
2326
986
3094
1209
1672
440
174
2692
1845
4835
3551
1597
2829
1061
986
1244
4403
928
4957
1874
1907
156
4847
1565
3625
866
4502
2007
2613
2100
485
4869
2776
4859
276
346
4357
3023
4366
3633
4376
1631
3600
265
2262
1393
3507
4129
3931
4453
4873
1227
244
4996
128
54
4667
2403
3139
180
3585
3629
640
2436
782
695
2120
3922
894
4863
4022
4045
399
4862
1725
3685
961
2257
415
3889
454
4135
2229
611
1157
555
3080
2745
1566
3033
3041
3146
1944
4700
3945
2534
3256
2293
3500
1204
2333
3986
3430
3178
842
429
720
1385
1485
2731
1688
2080
3066
2211
4772
3258
3695
3610
3450
284
3383
1906
338
2042
1135
2605
2029
3769
4585
3718
2632
3280
580
2368
2355
834
1736
309
367
66
2095
3238
3779
3742
2939
647
653
103
2149
3571
3269
4115
595
2813
329
3818
3396
4229
521
2710
1365
3234
3806
2956
1347
3608
1397
161
375
2586
3699
1488
2054
2208
1505
4331
3152
2306
793
2882
115
915
2536
241
4661
505
1143
465
374
3141
3907
516
2975
3957
3565
3681
984
613
4225
2178
3387
1647
4531
4869
4532
2715
2627
2146
2252
4412
1146
4512
1452
1075
2270
201
3332
2993
1747
679
1508
710
1180
632
607
522
2581
3327
2396
805
3697
1327
2094
2538
1720
1149
3689
2912
4394
385
180
4927
1474
4671
1906
2365
3820
205
508
3183
777
251
4963
4041
445
1290
1416
2063
138
4401
805
3524
3919
420
4538
3988
2057
1430
2470
1751
2646
424
4329
1697
2330
372
1610
2349
1699
3867
1552
4917
1272
2260
1294
1118
1920
1747
3078
2843
168
814
743
350
1212
2126
2609
4547
2736
1187
3465
3826
2604
2759
3467
4945
2987
549
321
3148
2734
993
3391
3367
4447
273
485
2092
3450
1128
172
3926
1678
2079
1413
4397
4481
1969
4171
1315
3651
3159
3163
207
525
1481
2341
1146
3187
2812
3293
3400
1416
1699
1068
3149
156
2418
3778
3931
1534
2318
2198
1360
4774
183
2030
774
2310
257
2950
4297
1649
2757
2604
4620
2873
1979
4205
1752
1084
4168
3463
3610
4731
3240
986
3774
467
4277
4323
2986
2933
3823
4566
4465
509
665
4143
211
2016
2123
4863
2071
1129
2897
2398
573
4963
2681
1492
1723
1672
3626
4516
1409
2929
1602
648
4952
3580
2419
4554
2390
2542
2264
4225
4657
818
1620
4696
3659
1311
4073
2756
92
1435
869
780
197
2242
9
1700
4734
3975
3709
512
463
351
3281
1613
1661
3485
4448
1243
2631
3146
1418
3979
1421
1806
914
8
4384
4298
3695
2414
4890
1009
3598
3335
1109
3984
1163
4833
225
4236
364
3644
3750
332
1090
3638
1870
1862
1749
421
1648
2693
4898
715
312
795
3632
4537
3654
2554
4331
3559
4568
3902
1194
898
4384
891
2840
2549
2716
4739
2977
434
3516
1710
2399
3335
2932
4929
2569
4212
1276
3063
4576
4868
2945
2931
604
2084
716
4708
1183
2416
1072
2212
176
1237
2698
4925
917
2666
1696
4076
4691
3159
4192
4436
496
3966
530
156
425
2744
4965
1678
2387
1113
3525
1127
3972
3990
4398
2464
3666
4744
1679
3547
722
835
644
2911
2177
133
3083
3462
2789
1398
2918
4035
2432
2694
3894
3082
1413
2676
2906
4797
458
972
1457
3721
3185
1104
1697
1667
2209
823
4002
1062
3268
4809
246
4055
3296
2449
3484
4699
679
242
3879
3245
4798
1687
85
4506
4887
3110
1721
3293
1872
1995
4871
1645
3646
1000
1943
2209
3195
2042
2116
3516
4016
4512
864
2521
4023
2680
2346
4093
1438
2787
290
1597
2242
4533
2091
1316
3918
269
1106
389
1879
866
2412
1757
1264
4086
2650
4941
2621
2825
3815
2431
3117
3352
457
4330
3188
4401
586
4214
3598
2032
1207
3472
611
2620
2357
1017
974
4908
2268
3464
1067
4883
4461
925
3142
2556
4800
1444
1868
1807
2677
3158
4690
196
2025
3768
1886
1201
4321
3653
161
3009
185
3835
848
1188
704
4081
3451
2080
127
841
774
3432
673
1168
3391
3899
1903
1610
1601
297
1788
2427
1530
2165
4686
4002
1960
2878
1383
3804
1703
4751
3551
4993
4423
2998
73
2907
884
2030
1286
4632
2426
3847
4822
1308
1962
4483
]]></test_input>
<test_output><![CDATA[8
9
9
9
19
43
45
54
56
66
67
73
85
92
103
115
127
128
133
138
156
156
156
161
161
161
166
168
172
174
176
180
180
183
185
193
196
197
201
205
207
211
225
241
242
244
246
251
257
265
269
273
276
284
290
297
308
309
312
316
317
321
329
332
338
346
350
351
360
364
367
372
374
375
382
385
386
389
399
415
420
421
422
424
425
429
434
440
445
448
454
457
457
458
463
465
467
485
485
492
494
496
505
508
509
512
516
521
522
523
525
529
530
535
545
549
553
555
573
574
580
586
595
597
604
607
611
611
613
613
613
632
640
644
647
648
653
653
662
665
673
679
679
684
684
695
704
710
715
716
720
722
722
725
732
743
746
747
774
774
777
780
782
793
795
801
805
805
814
818
818
823
834
835
841
842
848
851
864
866
866
869
877
878
884
891
894
898
913
914
915
916
917
925
928
951
952
961
968
972
974
984
984
986
986
986
993
1000
1009
1017
1040
1061
1062
1067
1067
1068
1072
1075
1077
1078
1084
1090
1104
1106
1109
1109
1113
1118
1127
1128
1129
1135
1143
1146
1146
1149
1151
1157
1160
1163
1168
1180
1183
1187
1188
1194
1197
1199
1201
1204
1207
1209
1209
1210
1212
1227
1237
1239
1243
1244
1264
1272
1276
1286
1290
1294
1308
1311
1315
1316
1327
1345
1347
1360
1365
1369
1375
1383
1385
1393
1397
1398
1403
1405
1409
1409
1413
1413
1416
1416
1418
1421
1430
1435
1438
1438
1444
1451
1452
1457
1462
1474
1481
1485
1488
1488
1492
1505
1508
1527
1530
1534
1537
1552
1552
1565
1565
1566
1580
1597
1597
1600
1601
1602
1602
1610
1610
1610
1613
1620
1631
1643
1645
1647
1648
1649
1661
1667
1672
1672
1678
1678
1679
1687
1688
1696
1697
1697
1699
1699
1699
1700
1703
1710
1720
1721
1723
1725
1736
1743
1747
1747
1747
1749
1751
1752
1757
1775
1788
1795
1806
1807
1812
1835
1845
1852
1859
1860
1862
1868
1870
1872
1874
1879
1884
1886
1903
1906
1906
1907
1911
1920
1936
1943
1944
1960
1962
1962
1969
1970
1979
1995
2007
2010
2016
2018
2025
2027
2029
2030
2030
2030
2032
2042
2042
2045
2054
2057
2057
2060
2063
2071
2079
2080
2080
2084
2091
2092
2094
2095
2100
2116
2120
2123
2126
2128
2146
2149
2159
2165
2165
2177
2178
2185
2194
2198
2207
2208
2209
2209
2211
2212
2212
2224
2229
2239
2242
2242
2252
2257
2260
2262
2264
2267
2268
2270
2290
2293
2306
2309
2310
2317
2318
2326
2330
2333
2335
2341
2345
2346
2349
2355
2357
2365
2368
2387
2390
2396
2398
2399
2403
2412
2414
2416
2418
2419
2423
2423
2423
2424
2426
2427
2431
2432
2436
2443
2448
2449
2464
2470
2472
2472
2485
2510
2521
2530
2531
2534
2536
2538
2542
2549
2554
2556
2569
2572
2578
2581
2586
2594
2604
2604
2605
2609
2613
2620
2620
2621
2627
2631
2632
2640
2646
2649
2650
2654
2655
2666
2669
2676
2677
2680
2681
2692
2693
2694
2695
2698
2710
2713
2715
2715
2716
2731
2734
2736
2741
2744
2745
2756
2757
2759
2763
2773
2776
2787
2789
2791
2796
2799
2812
2813
2825
2829
2840
2843
2872
2873
2878
2882
2897
2906
2907
2911
2912
2918
2929
2931
2932
2933
2939
2945
2950
2954
2956
2964
2975
2977
2986
2987
2993
2998
3009
3023
3033
3034
3041
3048
3063
3066
3078
3080
3082
3083
3094
3104
3110
3116
3117
3119
3123
3128
3128
3136
3139
3141
3142
3146
3146
3148
3149
3152
3158
3159
3159
3163
3167
3178
3183
3185
3187
3188
3195
3199
3234
3238
3240
3245
3256
3257
3258
3260
3261
3268
3269
3280
3281
3282
3293
3293
3296
3313
3324
3326
3327
3328
3332
3335
3335
3341
3348
3352
3367
3383
3387
3390
3391
3391
3396
3396
3400
3407
3423
3430
3432
3450
3450
3450
3451
3462
3463
3464
3465
3467
3472
3474
3484
3485
3500
3507
3516
3516
3521
3522
3524
3525
3528
3536
3547
3551
3551
3559
3565
3566
3571
3580
3585
3598
3598
3600
3602
3608
3610
3610
3614
3620
3625
3625
3626
3629
3632
3633
3638
3644
3646
3651
3653
3654
3659
3666
3681
3685
3689
3695
3695
3697
3699
3709
3714
3718
3721
3723
3738
3738
3742
3748
3750
3768
3769
3771
3774
3774
3777
3778
3779
3786
3789
3804
3806
3815
3818
3820
3823
3826
3835
3844
3847
3867
3879
3889
3894
3894
3899
3902
3907
3918
3919
3920
3922
3926
3931
3931
3943
3945
3957
3962
3966
3972
3975
3979
3984
3986
3988
3990
4002
4002
4005
4016
4022
4023
4027
4034
4035
4041
4045
4051
4055
4058
4072
4073
4076
4081
4086
4090
4093
4104
4115
4129
4135
4143
4161
4168
4168
4171
4183
4190
4192
4200
4205
4205
4212
4214
4214
4225
4225
4228
4229
4236
4272
4277
4279
4297
4298
4303
4310
4314
4319
4321
4323
4329
4330
4331
4331
4345
4347
4357
4366
4372
4376
4376
4384
4384
4394
4395
4397
4398
4401
4401
4403
4412
4423
4431
4436
4439
4445
4447
4448
4453
4457
4461
4465
4481
4483
4483
4487
4502
4506
4508
4512
4512
4512
4514
4516
4531
4532
4533
4537
4538
4547
4554
4566
4568
4576
4576
4585
4610
4620
4632
4657
4661
4667
4671
4686
4689
4690
4691
4691
4696
4699
4700
4704
4708
4718
4731
4734
4739
4744
4751
4757
4772
4774
4797
4798
4798
4800
4803
4809
4811
4818
4822
4833
4835
4843
4847
4858
4859
4862
4863
4863
4868
4869
4869
4871
4873
4880
4882
4883
4885
4887
4890
4898
4899
4904
4908
4909
4917
4925
4927
4929
4941
4945
4952
4957
4963
4963
4965
4980
4986
4993
4996
]]></test_output>
<test_input><![CDATA[50
951
4508
2212
2773
1345
3407
2715
4904
1209
2669
1199
3771
1852
1151
4090
2267
2594
193
2763
1197
684
3034
851
653
4512
1488
3786
4027
523
4431
3104
3390
2578
4372
4439
2159
56
4345
494
2799
386
4576
2057
3348
4487
45
4161
2290
2741
722
]]></test_input>
<test_output><![CDATA[45
56
193
386
494
523
653
684
722
851
951
1151
1197
1199
1209
1345
1488
1852
2057
2159
2212
2267
2290
2578
2594
2669
2715
2741
2763
2773
2799
3034
3104
3348
3390
3407
3771
3786
4027
4090
4161
4345
4372
4431
4439
4487
4508
4512
4576
4904
]]></test_output>
<test_input><![CDATA[17
360
4986
2472
1239
3328
4072
747
4005
613
1403
161
877
2345
4228
951
4508
2212
]]></test_input>
<test_output><![CDATA[161
360
613
747
877
951
1239
1403
2212
2345
2472
3328
4005
4072
4228
4508
4986
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[基础算法-排序]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>

int main()
{
	int N;
	int i,j,k,temp,a[1000];
	scanf("%d\n",&N);
	for(i=0;i<N;i++)
	scanf("%d",&a[i]);
	for(i=0;i<N-1;i++)
	{
		k=i;
		for(j=i+1;j<N;j++)
			if(a[k]>a[j])
			   k=j;
		 temp=a[i];
		 a[i]=a[k];
		 a[k]=temp;
	}
	for(i=0;i<N;i++)
		printf("%d\n",a[i]);
	return 0;

}]]></solution>
			<solution language="C++"><![CDATA[#include<iostream>
using namespace std;
int a[1001],i,j,n,s;
int main()
{
    cin>>n;
    for(i=1;i<=n;i++){cin>>a[i];}
    for(i=n-1;i>=1;i--)
    {
        for(j=1;j<=i;j++)
        {
            if (a[j]>a[j+1])
            {
                s=a[j];
                a[j]=a[j+1];
                a[j+1]=s;
            }
        }
    }
    for(i=1;i<=n;i++){cout<<a[i]<<endl;}
    return 0;
}
]]></solution>
			<solution language="Pascal"><![CDATA[var a:array[1..1000] of longint;
    n,i,j,t:longint;
begin
  readln(n);
  for i:=1 to n do
    readln(a[i]);
  for i:=1 to n-1 do
    for j:=i+1 to n do
      if a[i]>a[j] then
      begin
        t:=a[i];
        a[i]:=a[j];
        a[j]:=t;
      end;
  for i:=1 to n do
    writeln(a[i]);
end.]]></solution>
	</item>
<item>
<title><![CDATA[直接插入排序 inssort [1*]]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<span>输入n个整数，用直接插入排序的方法进行排序（升序，由小到大排） <br />
【插排方法:】将第1和第2个数排好序，则前2个数有序， <br />
第3个数往前比较，插入到前2个有序数的适当位置，使前3个数有序， <br />
第4个数往前比较，插入到前3个有序数的适当位置，使前4个数有序， <br />
依此类推，使所有n个数都有序。 <br />
【插入的方法：】第设前5个数已经有序，将第6个数保存到x，x逐个与第5到第1个数比较，直到找到x的正确位置m。 <br />
将第5到第m个数都往后移动一位，将x保存的位置m，则前6个数有序。 <br />
【思考：】要找到x的位置，a[j]与x的比较条件是什么？找到第一个满足条件的元素，用while循环。 <br />
提示，找到位置m再移动的方法效率低，可以变找边移动。 <br />
要用一个指针i记住已经有序的位置已经到了哪里，用另一个指针j来寻找x的位置。 <br />
实际上前两个数不用单独处理，因为第一个数可以认为是有序的，从第2个数开始进行往前插入。</span>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[100
2744
4965
1678
2387
1113
3525
1127
3972
3990
4398
2464
3666
4744
1679
3547
722
835
644
2911
2177
133
3083
3462
2789
1398
2918
4035
2432
2694
3894
3082
1413
2676
2906
4797
458
972
1457
3721
3185
1104
1697
1667
2209
823
4002
1062
3268
4809
246
4055
3296
2449
3484
4699
679
242
3879
3245
4798
1687
85
4506
4887
3110
1721
3293
1872
1995
4871
1645
3646
1000
1943
2209
3195
2042
2116
3516
4016
4512
864
2521
4023
2680
2346
4093
1438
2787
290
1597
2242
4533
2091
1316
3918
269
1106
389
1879
]]></test_input>
<test_output><![CDATA[85
133
242
246
269
290
389
458
644
679
722
823
835
864
972
1000
1062
1104
1106
1113
1127
1316
1398
1413
1438
1457
1597
1645
1667
1678
1679
1687
1697
1721
1872
1879
1943
1995
2042
2091
2116
2177
2209
2209
2242
2346
2387
2432
2449
2464
2521
2676
2680
2694
2744
2787
2789
2906
2911
2918
3082
3083
3110
3185
3195
3245
3268
3293
3296
3462
3484
3516
3525
3547
3646
3666
3721
3879
3894
3918
3972
3990
4002
4016
4023
4035
4055
4093
4398
4506
4512
4533
4699
4744
4797
4798
4809
4871
4887
4965
]]></test_output>
<test_input><![CDATA[23
2071
1129
2897
2398
573
4963
2681
1492
1723
1672
3626
4516
1409
2929
1602
648
4952
3580
2419
4554
2390
2542
2264
]]></test_input>
<test_output><![CDATA[573
648
1129
1409
1492
1602
1672
1723
2071
2264
2390
2398
2419
2542
2681
2897
2929
3580
3626
4516
4554
4952
4963
]]></test_output>
<test_input><![CDATA[1000
360
4986
2472
1239
3328
4072
747
4005
613
1403
161
877
2345
4228
951
4508
2212
2773
1345
3407
2715
4904
1209
2669
1199
3771
1852
1151
4090
2267
2594
193
2763
1197
684
3034
851
653
4512
1488
3786
4027
523
4431
3104
3390
2578
4372
4439
2159
56
4345
494
2799
386
4576
2057
3348
4487
45
4161
2290
2741
722
2317
4457
1369
9
3894
3521
3324
4034
3474
2954
3620
2239
1602
1438
3602
968
4483
1537
4689
4168
4843
2530
457
2964
1462
4319
382
1375
1580
2027
2018
4183
2030
4858
2796
3522
1699
4718
3536
3748
4347
3528
4885
1610
684
2443
19
4205
448
67
952
3116
1795
4899
4811
2654
2207
43
4310
2194
2335
4314
2448
3614
2045
2713
1077
2649
1775
3048
3943
913
4882
2620
3450
1884
2224
3128
1835
3326
4880
3423
818
1040
4691
2531
308
317
4980
3396
2309
2640
4303
3738
2655
1078
2510
2060
2423
1565
4395
4058
3167
4803
3199
3261
4757
1210
492
4051
4376
3260
4200
529
1109
574
1859
4818
3136
4798
1067
2010
166
3282
662
2791
9
3128
916
3723
3566
3777
1643
4279
2423
2185
2572
3341
3313
2872
746
2695
732
1160
1911
2485
984
801
3625
422
2165
1970
4514
597
1747
878
3789
4104
1409
1600
3738
3962
2423
1451
3774
545
1812
1527
725
3257
4445
1405
3123
4610
4214
1552
4190
613
1936
1860
3714
1743
4272
2424
4704
2472
3920
535
1962
3119
3844
4909
316
2128
553
2326
986
3094
1209
1672
440
174
2692
1845
4835
3551
1597
2829
1061
986
1244
4403
928
4957
1874
1907
156
4847
1565
3625
866
4502
2007
2613
2100
485
4869
2776
4859
276
346
4357
3023
4366
3633
4376
1631
3600
265
2262
1393
3507
4129
3931
4453
4873
1227
244
4996
128
54
4667
2403
3139
180
3585
3629
640
2436
782
695
2120
3922
894
4863
4022
4045
399
4862
1725
3685
961
2257
415
3889
454
4135
2229
611
1157
555
3080
2745
1566
3033
3041
3146
1944
4700
3945
2534
3256
2293
3500
1204
2333
3986
3430
3178
842
429
720
1385
1485
2731
1688
2080
3066
2211
4772
3258
3695
3610
3450
284
3383
1906
338
2042
1135
2605
2029
3769
4585
3718
2632
3280
580
2368
2355
834
1736
309
367
66
2095
3238
3779
3742
2939
647
653
103
2149
3571
3269
4115
595
2813
329
3818
3396
4229
521
2710
1365
3234
3806
2956
1347
3608
1397
161
375
2586
3699
1488
2054
2208
1505
4331
3152
2306
793
2882
115
915
2536
241
4661
505
1143
465
374
3141
3907
516
2975
3957
3565
3681
984
613
4225
2178
3387
1647
4531
4869
4532
2715
2627
2146
2252
4412
1146
4512
1452
1075
2270
201
3332
2993
1747
679
1508
710
1180
632
607
522
2581
3327
2396
805
3697
1327
2094
2538
1720
1149
3689
2912
4394
385
180
4927
1474
4671
1906
2365
3820
205
508
3183
777
251
4963
4041
445
1290
1416
2063
138
4401
805
3524
3919
420
4538
3988
2057
1430
2470
1751
2646
424
4329
1697
2330
372
1610
2349
1699
3867
1552
4917
1272
2260
1294
1118
1920
1747
3078
2843
168
814
743
350
1212
2126
2609
4547
2736
1187
3465
3826
2604
2759
3467
4945
2987
549
321
3148
2734
993
3391
3367
4447
273
485
2092
3450
1128
172
3926
1678
2079
1413
4397
4481
1969
4171
1315
3651
3159
3163
207
525
1481
2341
1146
3187
2812
3293
3400
1416
1699
1068
3149
156
2418
3778
3931
1534
2318
2198
1360
4774
183
2030
774
2310
257
2950
4297
1649
2757
2604
4620
2873
1979
4205
1752
1084
4168
3463
3610
4731
3240
986
3774
467
4277
4323
2986
2933
3823
4566
4465
509
665
4143
211
2016
2123
4863
2071
1129
2897
2398
573
4963
2681
1492
1723
1672
3626
4516
1409
2929
1602
648
4952
3580
2419
4554
2390
2542
2264
4225
4657
818
1620
4696
3659
1311
4073
2756
92
1435
869
780
197
2242
9
1700
4734
3975
3709
512
463
351
3281
1613
1661
3485
4448
1243
2631
3146
1418
3979
1421
1806
914
8
4384
4298
3695
2414
4890
1009
3598
3335
1109
3984
1163
4833
225
4236
364
3644
3750
332
1090
3638
1870
1862
1749
421
1648
2693
4898
715
312
795
3632
4537
3654
2554
4331
3559
4568
3902
1194
898
4384
891
2840
2549
2716
4739
2977
434
3516
1710
2399
3335
2932
4929
2569
4212
1276
3063
4576
4868
2945
2931
604
2084
716
4708
1183
2416
1072
2212
176
1237
2698
4925
917
2666
1696
4076
4691
3159
4192
4436
496
3966
530
156
425
2744
4965
1678
2387
1113
3525
1127
3972
3990
4398
2464
3666
4744
1679
3547
722
835
644
2911
2177
133
3083
3462
2789
1398
2918
4035
2432
2694
3894
3082
1413
2676
2906
4797
458
972
1457
3721
3185
1104
1697
1667
2209
823
4002
1062
3268
4809
246
4055
3296
2449
3484
4699
679
242
3879
3245
4798
1687
85
4506
4887
3110
1721
3293
1872
1995
4871
1645
3646
1000
1943
2209
3195
2042
2116
3516
4016
4512
864
2521
4023
2680
2346
4093
1438
2787
290
1597
2242
4533
2091
1316
3918
269
1106
389
1879
866
2412
1757
1264
4086
2650
4941
2621
2825
3815
2431
3117
3352
457
4330
3188
4401
586
4214
3598
2032
1207
3472
611
2620
2357
1017
974
4908
2268
3464
1067
4883
4461
925
3142
2556
4800
1444
1868
1807
2677
3158
4690
196
2025
3768
1886
1201
4321
3653
161
3009
185
3835
848
1188
704
4081
3451
2080
127
841
774
3432
673
1168
3391
3899
1903
1610
1601
297
1788
2427
1530
2165
4686
4002
1960
2878
1383
3804
1703
4751
3551
4993
4423
2998
73
2907
884
2030
1286
4632
2426
3847
4822
1308
1962
4483
]]></test_input>
<test_output><![CDATA[8
9
9
9
19
43
45
54
56
66
67
73
85
92
103
115
127
128
133
138
156
156
156
161
161
161
166
168
172
174
176
180
180
183
185
193
196
197
201
205
207
211
225
241
242
244
246
251
257
265
269
273
276
284
290
297
308
309
312
316
317
321
329
332
338
346
350
351
360
364
367
372
374
375
382
385
386
389
399
415
420
421
422
424
425
429
434
440
445
448
454
457
457
458
463
465
467
485
485
492
494
496
505
508
509
512
516
521
522
523
525
529
530
535
545
549
553
555
573
574
580
586
595
597
604
607
611
611
613
613
613
632
640
644
647
648
653
653
662
665
673
679
679
684
684
695
704
710
715
716
720
722
722
725
732
743
746
747
774
774
777
780
782
793
795
801
805
805
814
818
818
823
834
835
841
842
848
851
864
866
866
869
877
878
884
891
894
898
913
914
915
916
917
925
928
951
952
961
968
972
974
984
984
986
986
986
993
1000
1009
1017
1040
1061
1062
1067
1067
1068
1072
1075
1077
1078
1084
1090
1104
1106
1109
1109
1113
1118
1127
1128
1129
1135
1143
1146
1146
1149
1151
1157
1160
1163
1168
1180
1183
1187
1188
1194
1197
1199
1201
1204
1207
1209
1209
1210
1212
1227
1237
1239
1243
1244
1264
1272
1276
1286
1290
1294
1308
1311
1315
1316
1327
1345
1347
1360
1365
1369
1375
1383
1385
1393
1397
1398
1403
1405
1409
1409
1413
1413
1416
1416
1418
1421
1430
1435
1438
1438
1444
1451
1452
1457
1462
1474
1481
1485
1488
1488
1492
1505
1508
1527
1530
1534
1537
1552
1552
1565
1565
1566
1580
1597
1597
1600
1601
1602
1602
1610
1610
1610
1613
1620
1631
1643
1645
1647
1648
1649
1661
1667
1672
1672
1678
1678
1679
1687
1688
1696
1697
1697
1699
1699
1699
1700
1703
1710
1720
1721
1723
1725
1736
1743
1747
1747
1747
1749
1751
1752
1757
1775
1788
1795
1806
1807
1812
1835
1845
1852
1859
1860
1862
1868
1870
1872
1874
1879
1884
1886
1903
1906
1906
1907
1911
1920
1936
1943
1944
1960
1962
1962
1969
1970
1979
1995
2007
2010
2016
2018
2025
2027
2029
2030
2030
2030
2032
2042
2042
2045
2054
2057
2057
2060
2063
2071
2079
2080
2080
2084
2091
2092
2094
2095
2100
2116
2120
2123
2126
2128
2146
2149
2159
2165
2165
2177
2178
2185
2194
2198
2207
2208
2209
2209
2211
2212
2212
2224
2229
2239
2242
2242
2252
2257
2260
2262
2264
2267
2268
2270
2290
2293
2306
2309
2310
2317
2318
2326
2330
2333
2335
2341
2345
2346
2349
2355
2357
2365
2368
2387
2390
2396
2398
2399
2403
2412
2414
2416
2418
2419
2423
2423
2423
2424
2426
2427
2431
2432
2436
2443
2448
2449
2464
2470
2472
2472
2485
2510
2521
2530
2531
2534
2536
2538
2542
2549
2554
2556
2569
2572
2578
2581
2586
2594
2604
2604
2605
2609
2613
2620
2620
2621
2627
2631
2632
2640
2646
2649
2650
2654
2655
2666
2669
2676
2677
2680
2681
2692
2693
2694
2695
2698
2710
2713
2715
2715
2716
2731
2734
2736
2741
2744
2745
2756
2757
2759
2763
2773
2776
2787
2789
2791
2796
2799
2812
2813
2825
2829
2840
2843
2872
2873
2878
2882
2897
2906
2907
2911
2912
2918
2929
2931
2932
2933
2939
2945
2950
2954
2956
2964
2975
2977
2986
2987
2993
2998
3009
3023
3033
3034
3041
3048
3063
3066
3078
3080
3082
3083
3094
3104
3110
3116
3117
3119
3123
3128
3128
3136
3139
3141
3142
3146
3146
3148
3149
3152
3158
3159
3159
3163
3167
3178
3183
3185
3187
3188
3195
3199
3234
3238
3240
3245
3256
3257
3258
3260
3261
3268
3269
3280
3281
3282
3293
3293
3296
3313
3324
3326
3327
3328
3332
3335
3335
3341
3348
3352
3367
3383
3387
3390
3391
3391
3396
3396
3400
3407
3423
3430
3432
3450
3450
3450
3451
3462
3463
3464
3465
3467
3472
3474
3484
3485
3500
3507
3516
3516
3521
3522
3524
3525
3528
3536
3547
3551
3551
3559
3565
3566
3571
3580
3585
3598
3598
3600
3602
3608
3610
3610
3614
3620
3625
3625
3626
3629
3632
3633
3638
3644
3646
3651
3653
3654
3659
3666
3681
3685
3689
3695
3695
3697
3699
3709
3714
3718
3721
3723
3738
3738
3742
3748
3750
3768
3769
3771
3774
3774
3777
3778
3779
3786
3789
3804
3806
3815
3818
3820
3823
3826
3835
3844
3847
3867
3879
3889
3894
3894
3899
3902
3907
3918
3919
3920
3922
3926
3931
3931
3943
3945
3957
3962
3966
3972
3975
3979
3984
3986
3988
3990
4002
4002
4005
4016
4022
4023
4027
4034
4035
4041
4045
4051
4055
4058
4072
4073
4076
4081
4086
4090
4093
4104
4115
4129
4135
4143
4161
4168
4168
4171
4183
4190
4192
4200
4205
4205
4212
4214
4214
4225
4225
4228
4229
4236
4272
4277
4279
4297
4298
4303
4310
4314
4319
4321
4323
4329
4330
4331
4331
4345
4347
4357
4366
4372
4376
4376
4384
4384
4394
4395
4397
4398
4401
4401
4403
4412
4423
4431
4436
4439
4445
4447
4448
4453
4457
4461
4465
4481
4483
4483
4487
4502
4506
4508
4512
4512
4512
4514
4516
4531
4532
4533
4537
4538
4547
4554
4566
4568
4576
4576
4585
4610
4620
4632
4657
4661
4667
4671
4686
4689
4690
4691
4691
4696
4699
4700
4704
4708
4718
4731
4734
4739
4744
4751
4757
4772
4774
4797
4798
4798
4800
4803
4809
4811
4818
4822
4833
4835
4843
4847
4858
4859
4862
4863
4863
4868
4869
4869
4871
4873
4880
4882
4883
4885
4887
4890
4898
4899
4904
4908
4909
4917
4925
4927
4929
4941
4945
4952
4957
4963
4963
4965
4980
4986
4993
4996
]]></test_output>
<test_input><![CDATA[50
951
4508
2212
2773
1345
3407
2715
4904
1209
2669
1199
3771
1852
1151
4090
2267
2594
193
2763
1197
684
3034
851
653
4512
1488
3786
4027
523
4431
3104
3390
2578
4372
4439
2159
56
4345
494
2799
386
4576
2057
3348
4487
45
4161
2290
2741
722
]]></test_input>
<test_output><![CDATA[45
56
193
386
494
523
653
684
722
851
951
1151
1197
1199
1209
1345
1488
1852
2057
2159
2212
2267
2290
2578
2594
2669
2715
2741
2763
2773
2799
3034
3104
3348
3390
3407
3771
3786
4027
4090
4161
4345
4372
4431
4439
4487
4508
4512
4576
4904
]]></test_output>
<test_input><![CDATA[17
360
4986
2472
1239
3328
4072
747
4005
613
1403
161
877
2345
4228
951
4508
2212
]]></test_input>
<test_output><![CDATA[161
360
613
747
877
951
1239
1403
2212
2345
2472
3328
4005
4072
4228
4508
4986
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[基础算法-排序]]></source>
		<solution language="C++"><![CDATA[#include<iostream>
#include<cstdio>
using namespace std;
int a[1001],i,j;
void inssort(int n){
	int x,m;
	for(i=2;i<=n;i++){
		x=a[i];
		j=i-1;
		m=i;
		while(x<a[j]){
			a[0]=a[j];
			a[j]=x;
			a[m]=a[0];
			m=j;
			j--;
		}
	}
}
int main(){
	int n;
	scanf("%d",&n);
	for(i=1;i<=n;i++) scanf("%d",&a[i]);
	inssort(n);
	for(i=1;i<=n;i++) printf("%d\n",a[i]);
	return 0;
}]]></solution>
			<solution language="Pascal"><![CDATA[var a:array[1..10000] of longint;
    n,i,j,t:longint;
begin
  readln(n); 
  for i:=1 to n do
    read(a[i]);
  for i:=1 to n-1 do
    for j:=1 to n-i do
      if a[j]>a[j+1] then
      begin
        t:=a[j];
        a[j]:=a[j+1]; 
        a[j+1]:=t; 
      end;
  for i:=1 to n do
    writeln(a[i]);
end.
]]></solution>
	</item>
<item>
<title><![CDATA[快速排序 qsort [2*]]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	<span> 输入n个整数，用快速排序的方法进行排序 <br />
</span>
</p>
<p align="left">
	<b><span>Input</span> </b> 
</p>
<p>
	<span> 第一行数字n 代表接下来有n个整数 <br />
接下来n行，每行一个整数 <br />
</span>
</p>
<p align="left">
	<b><span>Output</span> </b> 
</p>
<p>
	<span> Output <br />
<br />
升序输出排序结果 <br />
每行一个数据 <br />
</span>
</p>
<p align="left">
	<b><span>Sample Input</span> </b> 
</p>
<pre><span>5
12
18
14
13
16 </span></pre>
<p align="left">
	<b><span>Sample Output</span> </b> 
</p>
<pre><span>12
13
14
16
18 </span></pre>
<p align="left">
	<b><span>Hint</span> </b> 
</p>
<span> n&lt;=5000 <br />
每个数据&lt;=5000 </span>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[100
2744
4965
1678
2387
1113
3525
1127
3972
3990
4398
2464
3666
4744
1679
3547
722
835
644
2911
2177
133
3083
3462
2789
1398
2918
4035
2432
2694
3894
3082
1413
2676
2906
4797
458
972
1457
3721
3185
1104
1697
1667
2209
823
4002
1062
3268
4809
246
4055
3296
2449
3484
4699
679
242
3879
3245
4798
1687
85
4506
4887
3110
1721
3293
1872
1995
4871
1645
3646
1000
1943
2209
3195
2042
2116
3516
4016
4512
864
2521
4023
2680
2346
4093
1438
2787
290
1597
2242
4533
2091
1316
3918
269
1106
389
1879
]]></test_input>
<test_output><![CDATA[85
133
242
246
269
290
389
458
644
679
722
823
835
864
972
1000
1062
1104
1106
1113
1127
1316
1398
1413
1438
1457
1597
1645
1667
1678
1679
1687
1697
1721
1872
1879
1943
1995
2042
2091
2116
2177
2209
2209
2242
2346
2387
2432
2449
2464
2521
2676
2680
2694
2744
2787
2789
2906
2911
2918
3082
3083
3110
3185
3195
3245
3268
3293
3296
3462
3484
3516
3525
3547
3646
3666
3721
3879
3894
3918
3972
3990
4002
4016
4023
4035
4055
4093
4398
4506
4512
4533
4699
4744
4797
4798
4809
4871
4887
4965
]]></test_output>
<test_input><![CDATA[23
2071
1129
2897
2398
573
4963
2681
1492
1723
1672
3626
4516
1409
2929
1602
648
4952
3580
2419
4554
2390
2542
2264
]]></test_input>
<test_output><![CDATA[573
648
1129
1409
1492
1602
1672
1723
2071
2264
2390
2398
2419
2542
2681
2897
2929
3580
3626
4516
4554
4952
4963
]]></test_output>
<test_input><![CDATA[1000
360
4986
2472
1239
3328
4072
747
4005
613
1403
161
877
2345
4228
951
4508
2212
2773
1345
3407
2715
4904
1209
2669
1199
3771
1852
1151
4090
2267
2594
193
2763
1197
684
3034
851
653
4512
1488
3786
4027
523
4431
3104
3390
2578
4372
4439
2159
56
4345
494
2799
386
4576
2057
3348
4487
45
4161
2290
2741
722
2317
4457
1369
9
3894
3521
3324
4034
3474
2954
3620
2239
1602
1438
3602
968
4483
1537
4689
4168
4843
2530
457
2964
1462
4319
382
1375
1580
2027
2018
4183
2030
4858
2796
3522
1699
4718
3536
3748
4347
3528
4885
1610
684
2443
19
4205
448
67
952
3116
1795
4899
4811
2654
2207
43
4310
2194
2335
4314
2448
3614
2045
2713
1077
2649
1775
3048
3943
913
4882
2620
3450
1884
2224
3128
1835
3326
4880
3423
818
1040
4691
2531
308
317
4980
3396
2309
2640
4303
3738
2655
1078
2510
2060
2423
1565
4395
4058
3167
4803
3199
3261
4757
1210
492
4051
4376
3260
4200
529
1109
574
1859
4818
3136
4798
1067
2010
166
3282
662
2791
9
3128
916
3723
3566
3777
1643
4279
2423
2185
2572
3341
3313
2872
746
2695
732
1160
1911
2485
984
801
3625
422
2165
1970
4514
597
1747
878
3789
4104
1409
1600
3738
3962
2423
1451
3774
545
1812
1527
725
3257
4445
1405
3123
4610
4214
1552
4190
613
1936
1860
3714
1743
4272
2424
4704
2472
3920
535
1962
3119
3844
4909
316
2128
553
2326
986
3094
1209
1672
440
174
2692
1845
4835
3551
1597
2829
1061
986
1244
4403
928
4957
1874
1907
156
4847
1565
3625
866
4502
2007
2613
2100
485
4869
2776
4859
276
346
4357
3023
4366
3633
4376
1631
3600
265
2262
1393
3507
4129
3931
4453
4873
1227
244
4996
128
54
4667
2403
3139
180
3585
3629
640
2436
782
695
2120
3922
894
4863
4022
4045
399
4862
1725
3685
961
2257
415
3889
454
4135
2229
611
1157
555
3080
2745
1566
3033
3041
3146
1944
4700
3945
2534
3256
2293
3500
1204
2333
3986
3430
3178
842
429
720
1385
1485
2731
1688
2080
3066
2211
4772
3258
3695
3610
3450
284
3383
1906
338
2042
1135
2605
2029
3769
4585
3718
2632
3280
580
2368
2355
834
1736
309
367
66
2095
3238
3779
3742
2939
647
653
103
2149
3571
3269
4115
595
2813
329
3818
3396
4229
521
2710
1365
3234
3806
2956
1347
3608
1397
161
375
2586
3699
1488
2054
2208
1505
4331
3152
2306
793
2882
115
915
2536
241
4661
505
1143
465
374
3141
3907
516
2975
3957
3565
3681
984
613
4225
2178
3387
1647
4531
4869
4532
2715
2627
2146
2252
4412
1146
4512
1452
1075
2270
201
3332
2993
1747
679
1508
710
1180
632
607
522
2581
3327
2396
805
3697
1327
2094
2538
1720
1149
3689
2912
4394
385
180
4927
1474
4671
1906
2365
3820
205
508
3183
777
251
4963
4041
445
1290
1416
2063
138
4401
805
3524
3919
420
4538
3988
2057
1430
2470
1751
2646
424
4329
1697
2330
372
1610
2349
1699
3867
1552
4917
1272
2260
1294
1118
1920
1747
3078
2843
168
814
743
350
1212
2126
2609
4547
2736
1187
3465
3826
2604
2759
3467
4945
2987
549
321
3148
2734
993
3391
3367
4447
273
485
2092
3450
1128
172
3926
1678
2079
1413
4397
4481
1969
4171
1315
3651
3159
3163
207
525
1481
2341
1146
3187
2812
3293
3400
1416
1699
1068
3149
156
2418
3778
3931
1534
2318
2198
1360
4774
183
2030
774
2310
257
2950
4297
1649
2757
2604
4620
2873
1979
4205
1752
1084
4168
3463
3610
4731
3240
986
3774
467
4277
4323
2986
2933
3823
4566
4465
509
665
4143
211
2016
2123
4863
2071
1129
2897
2398
573
4963
2681
1492
1723
1672
3626
4516
1409
2929
1602
648
4952
3580
2419
4554
2390
2542
2264
4225
4657
818
1620
4696
3659
1311
4073
2756
92
1435
869
780
197
2242
9
1700
4734
3975
3709
512
463
351
3281
1613
1661
3485
4448
1243
2631
3146
1418
3979
1421
1806
914
8
4384
4298
3695
2414
4890
1009
3598
3335
1109
3984
1163
4833
225
4236
364
3644
3750
332
1090
3638
1870
1862
1749
421
1648
2693
4898
715
312
795
3632
4537
3654
2554
4331
3559
4568
3902
1194
898
4384
891
2840
2549
2716
4739
2977
434
3516
1710
2399
3335
2932
4929
2569
4212
1276
3063
4576
4868
2945
2931
604
2084
716
4708
1183
2416
1072
2212
176
1237
2698
4925
917
2666
1696
4076
4691
3159
4192
4436
496
3966
530
156
425
2744
4965
1678
2387
1113
3525
1127
3972
3990
4398
2464
3666
4744
1679
3547
722
835
644
2911
2177
133
3083
3462
2789
1398
2918
4035
2432
2694
3894
3082
1413
2676
2906
4797
458
972
1457
3721
3185
1104
1697
1667
2209
823
4002
1062
3268
4809
246
4055
3296
2449
3484
4699
679
242
3879
3245
4798
1687
85
4506
4887
3110
1721
3293
1872
1995
4871
1645
3646
1000
1943
2209
3195
2042
2116
3516
4016
4512
864
2521
4023
2680
2346
4093
1438
2787
290
1597
2242
4533
2091
1316
3918
269
1106
389
1879
866
2412
1757
1264
4086
2650
4941
2621
2825
3815
2431
3117
3352
457
4330
3188
4401
586
4214
3598
2032
1207
3472
611
2620
2357
1017
974
4908
2268
3464
1067
4883
4461
925
3142
2556
4800
1444
1868
1807
2677
3158
4690
196
2025
3768
1886
1201
4321
3653
161
3009
185
3835
848
1188
704
4081
3451
2080
127
841
774
3432
673
1168
3391
3899
1903
1610
1601
297
1788
2427
1530
2165
4686
4002
1960
2878
1383
3804
1703
4751
3551
4993
4423
2998
73
2907
884
2030
1286
4632
2426
3847
4822
1308
1962
4483
]]></test_input>
<test_output><![CDATA[8
9
9
9
19
43
45
54
56
66
67
73
85
92
103
115
127
128
133
138
156
156
156
161
161
161
166
168
172
174
176
180
180
183
185
193
196
197
201
205
207
211
225
241
242
244
246
251
257
265
269
273
276
284
290
297
308
309
312
316
317
321
329
332
338
346
350
351
360
364
367
372
374
375
382
385
386
389
399
415
420
421
422
424
425
429
434
440
445
448
454
457
457
458
463
465
467
485
485
492
494
496
505
508
509
512
516
521
522
523
525
529
530
535
545
549
553
555
573
574
580
586
595
597
604
607
611
611
613
613
613
632
640
644
647
648
653
653
662
665
673
679
679
684
684
695
704
710
715
716
720
722
722
725
732
743
746
747
774
774
777
780
782
793
795
801
805
805
814
818
818
823
834
835
841
842
848
851
864
866
866
869
877
878
884
891
894
898
913
914
915
916
917
925
928
951
952
961
968
972
974
984
984
986
986
986
993
1000
1009
1017
1040
1061
1062
1067
1067
1068
1072
1075
1077
1078
1084
1090
1104
1106
1109
1109
1113
1118
1127
1128
1129
1135
1143
1146
1146
1149
1151
1157
1160
1163
1168
1180
1183
1187
1188
1194
1197
1199
1201
1204
1207
1209
1209
1210
1212
1227
1237
1239
1243
1244
1264
1272
1276
1286
1290
1294
1308
1311
1315
1316
1327
1345
1347
1360
1365
1369
1375
1383
1385
1393
1397
1398
1403
1405
1409
1409
1413
1413
1416
1416
1418
1421
1430
1435
1438
1438
1444
1451
1452
1457
1462
1474
1481
1485
1488
1488
1492
1505
1508
1527
1530
1534
1537
1552
1552
1565
1565
1566
1580
1597
1597
1600
1601
1602
1602
1610
1610
1610
1613
1620
1631
1643
1645
1647
1648
1649
1661
1667
1672
1672
1678
1678
1679
1687
1688
1696
1697
1697
1699
1699
1699
1700
1703
1710
1720
1721
1723
1725
1736
1743
1747
1747
1747
1749
1751
1752
1757
1775
1788
1795
1806
1807
1812
1835
1845
1852
1859
1860
1862
1868
1870
1872
1874
1879
1884
1886
1903
1906
1906
1907
1911
1920
1936
1943
1944
1960
1962
1962
1969
1970
1979
1995
2007
2010
2016
2018
2025
2027
2029
2030
2030
2030
2032
2042
2042
2045
2054
2057
2057
2060
2063
2071
2079
2080
2080
2084
2091
2092
2094
2095
2100
2116
2120
2123
2126
2128
2146
2149
2159
2165
2165
2177
2178
2185
2194
2198
2207
2208
2209
2209
2211
2212
2212
2224
2229
2239
2242
2242
2252
2257
2260
2262
2264
2267
2268
2270
2290
2293
2306
2309
2310
2317
2318
2326
2330
2333
2335
2341
2345
2346
2349
2355
2357
2365
2368
2387
2390
2396
2398
2399
2403
2412
2414
2416
2418
2419
2423
2423
2423
2424
2426
2427
2431
2432
2436
2443
2448
2449
2464
2470
2472
2472
2485
2510
2521
2530
2531
2534
2536
2538
2542
2549
2554
2556
2569
2572
2578
2581
2586
2594
2604
2604
2605
2609
2613
2620
2620
2621
2627
2631
2632
2640
2646
2649
2650
2654
2655
2666
2669
2676
2677
2680
2681
2692
2693
2694
2695
2698
2710
2713
2715
2715
2716
2731
2734
2736
2741
2744
2745
2756
2757
2759
2763
2773
2776
2787
2789
2791
2796
2799
2812
2813
2825
2829
2840
2843
2872
2873
2878
2882
2897
2906
2907
2911
2912
2918
2929
2931
2932
2933
2939
2945
2950
2954
2956
2964
2975
2977
2986
2987
2993
2998
3009
3023
3033
3034
3041
3048
3063
3066
3078
3080
3082
3083
3094
3104
3110
3116
3117
3119
3123
3128
3128
3136
3139
3141
3142
3146
3146
3148
3149
3152
3158
3159
3159
3163
3167
3178
3183
3185
3187
3188
3195
3199
3234
3238
3240
3245
3256
3257
3258
3260
3261
3268
3269
3280
3281
3282
3293
3293
3296
3313
3324
3326
3327
3328
3332
3335
3335
3341
3348
3352
3367
3383
3387
3390
3391
3391
3396
3396
3400
3407
3423
3430
3432
3450
3450
3450
3451
3462
3463
3464
3465
3467
3472
3474
3484
3485
3500
3507
3516
3516
3521
3522
3524
3525
3528
3536
3547
3551
3551
3559
3565
3566
3571
3580
3585
3598
3598
3600
3602
3608
3610
3610
3614
3620
3625
3625
3626
3629
3632
3633
3638
3644
3646
3651
3653
3654
3659
3666
3681
3685
3689
3695
3695
3697
3699
3709
3714
3718
3721
3723
3738
3738
3742
3748
3750
3768
3769
3771
3774
3774
3777
3778
3779
3786
3789
3804
3806
3815
3818
3820
3823
3826
3835
3844
3847
3867
3879
3889
3894
3894
3899
3902
3907
3918
3919
3920
3922
3926
3931
3931
3943
3945
3957
3962
3966
3972
3975
3979
3984
3986
3988
3990
4002
4002
4005
4016
4022
4023
4027
4034
4035
4041
4045
4051
4055
4058
4072
4073
4076
4081
4086
4090
4093
4104
4115
4129
4135
4143
4161
4168
4168
4171
4183
4190
4192
4200
4205
4205
4212
4214
4214
4225
4225
4228
4229
4236
4272
4277
4279
4297
4298
4303
4310
4314
4319
4321
4323
4329
4330
4331
4331
4345
4347
4357
4366
4372
4376
4376
4384
4384
4394
4395
4397
4398
4401
4401
4403
4412
4423
4431
4436
4439
4445
4447
4448
4453
4457
4461
4465
4481
4483
4483
4487
4502
4506
4508
4512
4512
4512
4514
4516
4531
4532
4533
4537
4538
4547
4554
4566
4568
4576
4576
4585
4610
4620
4632
4657
4661
4667
4671
4686
4689
4690
4691
4691
4696
4699
4700
4704
4708
4718
4731
4734
4739
4744
4751
4757
4772
4774
4797
4798
4798
4800
4803
4809
4811
4818
4822
4833
4835
4843
4847
4858
4859
4862
4863
4863
4868
4869
4869
4871
4873
4880
4882
4883
4885
4887
4890
4898
4899
4904
4908
4909
4917
4925
4927
4929
4941
4945
4952
4957
4963
4963
4965
4980
4986
4993
4996
]]></test_output>
<test_input><![CDATA[50
951
4508
2212
2773
1345
3407
2715
4904
1209
2669
1199
3771
1852
1151
4090
2267
2594
193
2763
1197
684
3034
851
653
4512
1488
3786
4027
523
4431
3104
3390
2578
4372
4439
2159
56
4345
494
2799
386
4576
2057
3348
4487
45
4161
2290
2741
722
]]></test_input>
<test_output><![CDATA[45
56
193
386
494
523
653
684
722
851
951
1151
1197
1199
1209
1345
1488
1852
2057
2159
2212
2267
2290
2578
2594
2669
2715
2741
2763
2773
2799
3034
3104
3348
3390
3407
3771
3786
4027
4090
4161
4345
4372
4431
4439
4487
4508
4512
4576
4904
]]></test_output>
<test_input><![CDATA[17
360
4986
2472
1239
3328
4072
747
4005
613
1403
161
877
2345
4228
951
4508
2212
]]></test_input>
<test_output><![CDATA[161
360
613
747
877
951
1239
1403
2212
2345
2472
3328
4005
4072
4228
4508
4986
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[算法笔记 基础算法-排序]]></source>
		<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>
int a[1001],n;
void qs(int l,int r)
{
	int t,i,j,m;
    if (l>r)
		return;
    m=a[l];
    i=l;
    j=r;
    while (i!=j)
    {
		while (a[j]>=m && i<j) j--;
        while (a[i]<=m && i<j) i++;
        if (i<j)
        {
			t=a[i]; a[i]=a[j]; a[j]=t;
        }
    }
    a[l]=a[i];
    a[i]=m;
    qs(l,i-1);
    qs(i+1,r);
    return;
}
int main()
{
	int i;
    scanf("%d",&n);
    for (i=1;i<=n;i++) scanf("%d",&a[i]);
    qs(1,n);
    for (i=1;i<=n;i++) printf("%d\n",a[i]);
  	return 0;
}
]]></solution>
			<solution language="C++"><![CDATA[#include<iostream>
using namespace std;
int a[5001],q,z,b;
void qz(int l,int r)
{
     int i,j,m;
     i=l;j=r;m=a[(l+r)/2];
     while (i<j)
     {
           while (a[i]<m) i++;
           while (a[j]>m) j--;
           if (i<=j) {q=a[i];a[i]=a[j];a[j]=q;i++;j--;}
     }
     if (l<j) qz(l,j);
     if (i<r) qz(i,r);
}
int main()
{
    cin>>z;
    for (b=1;b<=z;b++) cin>>a[b];
    qz(1,z);
    for (b=1;b<=z;b++) cout<<a[b]<<endl;
    //system("pause");
    return 0;
}
]]></solution>
			<solution language="Pascal"><![CDATA[var a:array[1..5000] of longint;
    n,i:longint;

procedure qsort(l,r:longint);
var i,j,t,mid:longint;
begin
  i:=l; j:=r; mid:=a[(i+j) div 2];
  repeat
    while a[i]<mid do inc(i);
    while a[j]>mid do dec(j);
    if i<=j then
    begin
      t:=a[i]; a[i]:=a[j]; a[j]:=t;
      inc(i); dec(j);
    end;
  until i>j;
  if l<j then qsort(l,j);
  if i<r then qsort(i,r);
end;

begin
  readln(n);
  for i:=1 to n do
    readln(a[i]);
  qsort(1,n);
  for i:=1 to n do
    writeln(a[i]);
end.]]></solution>
			<solution language="Java"><![CDATA[import java.util.Scanner;

public class Main {


    public static int getjz(int []arr,int startIndex,int endIndex){
        int jz = arr[startIndex];
        int left = startIndex;
        int right = endIndex;
        while(left!=right){
            //right指针从右往左找比基准元素小的元素
            while((left<right) && arr[right]>jz)
                right--;
            //left指针从左往右找比基准元素大的元素
            while((left<right) && arr[left]<=jz)
                left++;
            //交换两个指针指向的元素
            if(left<right) {
                int t       = arr[left];
                arr[left]   = arr[right];
                arr[right]  = t;
            }
        }
        //left和right重合后，重合点元素和基准元素交换位置
        arr[startIndex] = arr[left];
        arr[left]=jz;

        return left;
    }

    public static void QS(int []arr,int startIndex,int endIndex){
        if(startIndex>=endIndex)
            return;
        //获取基准元素
        int jzIndex = getjz(arr,startIndex,endIndex);
        //对基准元素左边进行排序
        QS(arr,startIndex,jzIndex-1);
        //对基准元素右边进行排序
        QS(arr,jzIndex+1,endIndex);
    }

    public static void main(String[] args) {
//        int []data = {9,3,6,21,2,1,34,8,2,3};
        int n;
        Scanner cin = new Scanner(System.in);
        n = cin.nextInt();
        int []data = new int[n];
        for(int i=0;i<n;i++)
            data[i] = cin.nextInt();

        QS(data,0,data.length-1);

        for(int v:data){
            System.out.println(v+" ");
        }
    }
}
]]></solution>
	</item>
<item>
<title><![CDATA[冒泡字符降序排序 bubsortalphdn [1*]]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<span><span style="font-family:SimSun;line-height:1.5;">冒泡法降序排序字符串数据 程序bubsortalphdn.pas  输入输出sortalph.in/out </span><br />
<span style="font-family:SimSun;line-height:1.5;"> 请用冒泡法对字符串数据进行降序排序 </span><br />
<span style="font-family:SimSun;line-height:1.5;">【输入】第一行一个数，代表有n个字符串需要排序。接下来的n行字符串，为需要排序的字符串。 </span><br />
<span style="font-family:SimSun;line-height:1.5;">【输出】n行，每行一个字符串，为排序后的字符串。</span></span> 
<pre><span> 【样例输入】 	【样例输出】
5	          tom 
sam	          sam
alice	          lucy
tom	          cindy
lucy	          alice
cindy </span></pre>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[7
klfdjgsd
reotuper
mdsadw
ewqeqwe
yrty
uipoui
fcxvxfc]]></test_input>
<test_output><![CDATA[yrty
uipoui
reotuper
mdsadw
klfdjgsd
fcxvxfc
ewqeqwe
]]></test_output>
<test_input><![CDATA[8
sakljdfuasdf
ftiouer
vcmbn
rtyopertui
jlgksdg
ewiopwrt
glkdfhgwe
dfjkysgw
]]></test_input>
<test_output><![CDATA[vcmbn
sakljdfuasdf
rtyopertui
jlgksdg
glkdfhgwe
ftiouer
ewiopwrt
dfjkysgw
]]></test_output>
<test_input><![CDATA[20
kglsdfg
fdgkluipoweteiroues
ioewry
sklahf
wqopei
mvxcn
dektifsd
ghkl
oidaskdj 
askldj
klfdjgdf
ieourfdsg
cxvnmf
dsfjkf
fsdbhk
cvxbhj
wqklera
xzc
fjksdh
reiotu
]]></test_input>
<test_output><![CDATA[xzc
wqopei
wqklera
sklahf
reiotu
oidaskdj 
mvxcn
klfdjgdf
kglsdfg
ioewry
ieourfdsg
ghkl
fsdbhk
fjksdh
fdgkluipoweteiroues
dsfjkf
dektifsd
cxvnmf
cvxbhj
askldj

]]></test_output>
<test_input><![CDATA[6
daslkjd 
jkfghckx
uier
mcbnv
gklhj
reitu
]]></test_input>
<test_output><![CDATA[uier
reitu
mcbnv
jkfghckx
gklhj
daslkjd 
]]></test_output>
<test_input><![CDATA[5
dasd
fdasf
wewd
vcx
bcvb
]]></test_input>
<test_output><![CDATA[wewd
vcx
fdasf
dasd
bcvb

]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[基础算法-排序]]></source>
		<solution language="Pascal"><![CDATA[var s:array[1..100000] of string;
    n,i,j:longint;
    str:string;
begin
  readln(n);
  for i:=1 to n do
    readln(s[i]);
  for i:=1 to n-1 do
    for j:=1 to n-i do
      if s[j]<s[j+1] then
      begin
        str:=s[j];
        s[j]:=s[j+1];
        s[j+1]:=str;
      end;
  for i:=1 to n do
    writeln(s[i]);
end.]]></solution>
	</item>
</fps>
